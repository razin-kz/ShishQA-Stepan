Что такое клиент-серверная архитектура?

Это когда клиентом выступает приложение или веб-сайт, пользователь пишет в него запрос - клиент направляет этот запрос на сервер, сервер в свою очередь спрашивает у базы данных информацию, запрошенную пользователем.
база данных находит всю необходимую информацию по запросу и возвращает ее серверу, который затем передает ее клиенту. А уже ее видит пользователь.

Участники потока:
1. Для чего нужен клиент? С ним работает пользователь. В нем вся информация структурирована и понятна для него.
2. Почему в этом потоке участвует сервер? 
- Потому что он мощнее, чем клиент и содержит в себе гораздо больше информации, чем обычное приложение или веб-сайт. Клиент должен работать быстро, но не всегда для каждого клиента может стоять мощная машина. Затем и нужен сервер.
- Нет дублирования кода, вся основаня логика вынесена на мощный сервер.
- Так безопаснее: на сервере и в базе хранится информация, недоступная простому операционисту: персональные данные клиентов, финансовые данные клиентов, различные черные списки и т.д.
3. Зачем нужна база? Иногда сервер хранит достаточную базу данных, чтобы не было необходимости обращаться к ней отдельно. Такую архитектуру называют клиент-серверной. вот только если сервер(который хранит в себе базу данных) упадет, или перезагрузится, то вся информация будет потеряна. 
БД (база данных) - отдельный программный продукт, который позволяет:
- быстро делать выборки информации;
- сохранять данные даже при рестарте системы - это называется персистемность.

Из минусов архитектуры:
1. Если упало одно звено - все не работают. Именно поэтому в бизнес-критичном ПО архитектуру усложняют и даже дублируют.
Бизнес с тысячами операционистов не может позволить себе простой. Поэтому они используют кластер серверов: один упал, остальные работают. Здесть перед серверами ставят балансировщик с одни URL-адресом.
Такие же балансировщики могут стоять перед базами данных - для распределения нагрузки в кластере баз данных.
2. Высокая стоимость оборудования. Сервера стоят дорого, т.к. повышенная надежность и есть поддержка специфичных функций, гарантия серверных решений - 5 лет.
3. Нужно нанять сисадмина - следящего за всеми серверами приложения и БД.

Что здесь тестировать?
1. Проверить клиент(с ним работает пользователь);
2. Проверить сервер (тут хранится код);
3. Порверить БД (тут лежат данные);
Проверить уязвимости и обсудить с командой.

